<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg height="299%" width="299%" xmlns="http://www.w3.org/2000/svg" style="font-family:Ubuntu" title="Dookumentation">

    <text title="Dookumentation">

        <tspan x="9" y="50" style="font-size:4em">Dookumentation !</tspan>

        {%
        {{'<tspan x="9" y="99" style="font-size:2em"> Statistics </tspan>'}}

        {{'<tspan x="9" y="120">   Lines Total: {0}.       </tspan>'.format(data['lines_total'])}}

        {{'<tspan x="150" y="120"> Lines Code: {0}.        </tspan>'.format(data['lines_code'])}}

        {{'<tspan x="300" y="120"> Size (Kb.): {0}.        </tspan>'.format(data['kilobytes']) }}

        {{'<tspan x="9" y="150">   Characters: {0}.        </tspan>'.format(data['characters']) }}

        {{'<tspan x="150" y="150"> Words: {0}.             </tspan>'.format(data['words'])}}

        {{'<tspan x="300" y="150"> Punct.: {0}.            </tspan>'.format(data['punctuations'])}}

        {{'<tspan x="9" y="180">   Permissions: {0}.       </tspan>'.format(data['permissions'])}}

        {{'<tspan x="150" y="180"> Bugs ?: {0}.            </tspan>'.format(bool(data['pylama'])) }}

        {{'<tspan x="300" y="180"> SymLink ?: {0}.         </tspan>'.format(data['symlink']) }}

        {{'<tspan x="9" y="210">   Writable ?: {0}.        </tspan>'.format(data['writable']) }}

        {{'<tspan x="150" y="210"> Executable?: {0}.       </tspan>'.format(data['executable'])}}

        {{'<tspan x="300" y="210"> Readable ?: {0}.        </tspan>'.format(data['readable']) }}

        {{'<tspan x="9" y="240">   Has Print()?: {0}       </tspan>'.format(data['has_print']) }}

        {{'<tspan x="150" y="240"> __import__()?: {0}.     </tspan>'.format(data['import_procedural'])}}

        {{'<tspan x="300" y="240"> Has BreakPoints ?: {0}. </tspan>'.format(data['has_set_trace']) }}

        {{'<tspan x="9" y="270">   SheBang ? {0}.          </tspan>'.format(data['has_shebang']) }}


        {{ '<tspan x="500" y="99" style="font-size:2em" title="Bugs">Bugs</tspan>' }}

        if len(data.get('pylama')):
            {{'<tspan x="500" y="120"> You wrote 1 Bug every {0} Lines of Code !.</tspan>'.format(data['lines_per_bug']) }}

        for i, _ in enumerate(data['pylama']):
            {{'<tspan x="500" y="{0}"> {1}. '.format(150 + i * 20, i) }}
            {{'    Line {0} Column {1} found by {2}: {3}.</tspan>'.format(_['lnum'], _['col'], _['linter'].upper(), _['text'][:99]) }}
        else:
            if check_path and parse_options:  # Theres PyLama but theres no Errors.
                {{ '<tspan x="500" y="170" style="color:green"> No Bugs !. </tspan>' }}
            else:  # Theres NO PyLama, but may or may not be no Errors ?.
                {{ '<tspan x="500" y="170" style="color:red"> No PyLama !. </tspan>' }}


        if len(data.get('todo')):
            {{ '<tspan x="1200" y="99" style="font-size:2em"> Things To Do</tspan>' }}
            for i, _ in enumerate(data['todo']):
                {{'<tspan x="1200" y="{0}"> {1}. '.format(150 + i * 20, i) }}
                {{'    {0} on Line {1}: {2}. </tspan>'.format(_['type'].upper(), _['lnum'], _['text'][:99]) }}


        {{'<tspan x="9" y="500" title="Import" style="font-size:2em">Imports</tspan>'}}

        if len(data.get('imports')):
            for i, _ in enumerate(data['imports'].items()):
                {{'<tspan x="9" y="{0}">{1}. {2}</tspan>'.format(550 + i * 30, i, str(_)[:70])}}
        else:
            {{ '<tspan x="9" y="550">No Imports!, Parser cant find Imports.</tspan>' }}


        {{ '<tspan x="500" y="500" style="font-size:2em">Attributes</tspan>' }}

        if len(data.get('attributes')):
            for i, _ in enumerate(data['attributes'].items()):
                {{'<tspan x="500" y="{0}">{1}. {2}</tspan>'.format(550 + i * 30, i, str(_)[:70])}}
        else:
            {{ '<tspan x="9" y="550">No Attributes!, cant find Attributes.</tspan>' }}


        {{ '<tspan x="1200" y="500" style="font-size:2em">Functions</tspan>' }}
        if len(data.get('attributes')):
            for i, _ in enumerate(data['functions'].items()):
                {{'<tspan x="1200" y="{0}">{1}. {2}</tspan>'.format(550 + i * 30, i, str(_)[:70])}}
        else:
            {{ '<tspan x="1200" y="550">No Functions!, cant find Functions.</tspan>' }}
        %}


        <tspan x="700" y="25"> Made with Python StdLibs by Juan</tspan>

        <tspan x="700" y="50"> Tested on Chromium, Chrome, Android, Firefox and Qupzilla. </tspan>

        <tspan x="1200" y="25" title="Dookumentation"> {%{{ __url__ }}%} </tspan>

        <tspan x="1200" y="50" title="Dookumentation"> {%{{ data['generator'] }}%} </tspan>

    </text>

    ERROR: Your Browser does not support SVG!.

</svg>

<!-- Dookumentation! https://github.com/juancarlospaco/dookumentation -->


<!--
    Support for this format is very limited,
    I keep searching a way to do Text non-nested non-absolute-positioned on SVG.
-->
