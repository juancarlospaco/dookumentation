<!DOCTYPE html>
    <meta charset=utf-8 >


{%

{{ '<title>{0} - Dookumentation</title>'.format(data['basename'][:99]) }}

if not livereload:
    {{ '<meta http-equiv=refresh content=240 ><!-- LiveReload not installed -->' }}

%}


    <meta name=viewport content="width=device-width, initial-scale=1.0">
    <meta name=generator content=Dookumentation >
    <meta name=description content="Documentation HTML generated by Dookumentation">
    <meta name=keywords content="Documentation,Python,HTML,Manual,Help,Readme">
    <link rel="shortcut icon" href="https://www.python.org/static/favicon.ico"/>


    <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header">
        <header class="mdl-layout__header">
            <div class="mdl-layout__header-row">
                <span class="mdl-layout-title">
                    <h1 title="The Dark Side of Documentation">Dookumentation !</h1>
                </span>
                <div class="mdl-layout-spacer">
                    <center>
                        <form action="#">
                            <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                                <input class="mdl-textfield__input" type=search list=lista id="sample3" placeholder="Type to Search..." />
                                <datalist id=lista>
                                    {%
                                    for _ in data.values():
                                        if isinstance(_, str) and not _.isdigit() and len(_) > 3 and len(_) < 80:
                                            {{ '<option value="{0}"> '.format(_.lower()) }}
                                    %}
                                </datalist>
                            </div>
                        </form>
                    </center>
                </div>
                <nav class="mdl-navigation">
                    <a class="mdl-navigation__link" alt="Go back to Index" href="" id=navindex >Index</a>
                    <a class="mdl-navigation__link" alt="Go back to Modules" href="" id=navmodules >Modules</a>
                </nav>
            </div>
        </header>
        <br>
        <div class=overlay id=overlay_container >
            <div id=overlay >

{%


with open(data['fullpath'], 'r', encoding='utf-8') as _code:
    try:  # Use pygments if is installed.
        from pygments import highlight
        from pygments.lexers import PythonLexer
        from pygments.formatters import HtmlFormatter
        formater = HtmlFormatter(linenos=True, anchorlinenos=True, nobackground=True)
        {{ str(highlight(_code.read(), PythonLexer(), formater))  }}
        {{ '<style>{0}</style>'.format(formater.get_style_defs()) }}
    except ImportError:  # Dont Die if is not installed.
        {{ '<textarea name=editContent id=source_code readonly >{}</textarea><!-- Pygments not installed -->'.format(_code.read().strip()) }}
{{ '</div></div><section>' }}


###############################################################################
# Imports


if data.get('imports'):
    {{ '<details id=imports open title="We parse all Imports from code"> <summary> <b>&zhcy; Imports</b> </summary> <h4> &check; {0} Imports!.</h4> <ol> '.format(len(data['imports']['imports']) + len(data['imports']['from_imports'])) }}
    for _ in data['imports']['imports'].items() :
        if _[0].lower() in vuiltins:
            try:
                tit = __import__(str(_[0])).__doc__.strip()[:9999].replace('"', "'")
            except:
                tit = str(_[0]).capitalize()
            {{ '<li> <b>import <a title="{tit}" alt="{mod}" target=_blank href="javascript:void(0)" onclick=searchy("{mod}") >{mod}</a> {ass}</b> &raquo; <a title="{mod}" alt="{mod}" target=_blank href="javascript:void(0)" onclick="overly()">Line {lin}</a> <br><br>'.format(
                mod=_[0],
                ass="as {}".format(_[1]['asname']) if _[1]['asname'] else "",
                lin=_[1]['lineno'],
                tit=tit) }}
        else:
            {{ '<li> <b>import {0} {1}</b> &raquo; <a  title="{0}" alt="{0}" target=_blank href="javascript:void(0)" onclick="overly()">Line {2}</a> <br><br>'.format(_[0], "as {}".format(_[1]['asname']) if _[1]['asname'] else "", _[1]['lineno']) }}
    for _ in data['imports']['from_imports'].items():
        if _[0].lower() in vuiltins or _[1]['module'].lower() in vuiltins:
            try:
                tit = __import__(str(_[1]['module'])).__doc__.strip()[:9999].replace('"', "'")
            except:
                tit = str(_[1]['module']).capitalize()
            {{ '<li> <b>from <a title="{tit}" alt="{mod}" target=_blank href="javascript:void(0)" onclick=searchy("{mod}") >{mod}</a> import <a title="{sub}" alt="{sub}" target=_blank href="javascript:void(0)" onclick=searchy("{sub}") >{sub}</a> {ass}</b> &raquo; <a title="{mod}" alt="{mod}" target=_blank href="javascript:void(0)" onclick="overly()">Line {lin}</a> <br><br>'.format(
                tit=tit,
                mod=_[1]['module'],
                sub=_[0],
                ass="as {}".format(_[1]['asname']) if _[1]['asname'] else "",
                lin=_[1]['lineno']) }}
        else:
            {{ '<li> <b>from {0} import {1} {2}</b> &raquo; <a title="{3}" alt="{3}" target=_blank href="javascript:void(0)" onclick="overly()">Line {3}</a> <br><br>'.format(_[1]['module'], _[0], "as {}".format(_[1]['asname']) if _[1]['asname'] else "", _[1]['lineno'] ) }}
    {{ '</ol> <i> <a title="We recommend using iSort" alt="We recommend using iSort" target=_blank href="https://github.com/timothycrosley/isort">We recommend iSort</a> </i> <br> </details> <hr>' }}


###############################################################################
# Functions


if data.get('functions'):
    {{ '<details id=functions open title="We parse all Functions from code"> <summary> <b>&boxbox; Functions</b> </summary> <h4> &check; {0} Functions!.</h4>  <ol> '.format(len(data.get('functions'))) }}
    for _ in data['functions'].items():
        decoradore = '<br>'.join(_[1]['decorators']) + '<br>' if _[1]['decorators'] != [] else ''
        attrivutes = ''
        if len(_[1]['attrs']):
            for atri in _[1]['attrs'].items():
                attrivutes += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0} &raquo; <a title="{0}" alt="{0}" target=_blank href="javascript:void(0)" onclick="overly()">Line {1}</a> <br>'.format(atri[0], atri[1])
        else:
            attrivutes = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &bull; &bull; &bull;'
        {{ '<li>{deco} def <b>{name}:</b> &raquo; <a title="{name}" alt="{name}" target=_blank href="javascript:void(0)" onclick="overly()">Line {lin}</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<textarea readonly title=DocString style="width:350px">{docz}</textarea><br>{atri}'.format(name=_[0], deco=decoradore, docz=_[1]['docstring'], lin=_[1]['lineno'], atri=attrivutes) }}
    {{ ' </details> <hr>' }}


###############################################################################
# Classes


if data.get('classes'):
    {{ '<details id=classes open title="We parse all Classes from code"> <summary> <b>&boxbox; Classes</b> </summary> <h4> &check; {0} Classes!.</h4>  <ol> '.format(len(data.get('classes'))) }}
    for _ in data['classes'].items():
        decoradore = '<br>'.join(_[1]['decorators']) + '<br>' if _[1]['decorators'] != [] else ''
        attrivutes = ''
        if len(_[1]['attributes']):
            for atri in _[1]['attributes'].items():
                attrivutes += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0} &raquo; <a title="{0}" alt="{0}" target=_blank href="javascript:void(0)" onclick="overly()">Line {1}</a> <br>'.format(atri[0], atri[1])
        else:
            attrivutes = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &bull; &bull; &bull;'
        {{ '<li>{deco} class <b>{name}:</b> &raquo; <a title="{name}" alt="{name}" target=_blank href="javascript:void(0)" onclick="overly()">Line {lin}</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<textarea readonly title=DocString style="width:350px">{docz}</textarea><br>{atri}<br>'.format(name=_[0], deco=decoradore, docz=_[1]['docstring'], lin=_[1]['lineno'], atri=attrivutes) }}
        if len(_[1]['functions']):
            for _ in _[1]['functions'].items():
                decoradore = '<br>'.join(['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + d for d in _[1]['decorators']]) + '<br>' if _[1]['decorators'] != [] else ''
                attrivutes = ''
                if len(_[1]['attrs']):
                    for atri in _[1]['attrs'].items():
                        attrivutes += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0} &raquo; <a title="{0}" alt="{0}" target=_blank href="javascript:void(0)" onclick="overly()">Line {1}</a> <br>'.format(atri[0], atri[1])
                else:
                    attrivutes = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &bull; &bull; &bull;'
                {{ '<p>{deco}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def <b>{name}:</b> &raquo; <a title="{name}" alt="{name}" target=_blank href="javascript:void(0)" onclick="overly()">Line {lin}</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<textarea readonly title=DocString style="width:300px">{docz}</textarea><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{atri}'.format(name=_[0], deco=decoradore, docz=_[1]['docstring'], lin=_[1]['lineno'], atri=attrivutes) }}
        {{ ' <hr> ' }}
    {{ ' <br> </details> <hr>' }}


###############################################################################
# Attributes


if data.get('attributes'):
    {{ '<details id=attributes open title="We parse all Attributes from code"> <summary> <b>&Diamond; Attributes</b> </summary> <h4> &check; {0} Attributes!.</h4> <ol> '.format(len(data.get('attributes'))) }}
    for _ in sorted(data['attributes'].items()):
        {{ '<li><input type=text value="{1}" readonly /> &raquo; <a  title="{1}" alt="{1}" target=_blank href="javascript:void(0)" onclick="overly()">Line {0}</a>'.format(_[1], _[0]) }}
        if _[0].lower() in vuiltins:
            {{ '&nbsp; <a title="Search info of this Attribute" alt="Search info of this Attribute" target=_blank href="javascript:void(0)" onclick=searchy("{0}") ><i class="material-icons">search</i></a>'.format(str(_[0]).lower().strip()) }}
        {{ '<br>' }}
    {{ ' </details> <hr>' }}


###############################################################################
# Bugs


if data.get('pylama'):
    {{ '<details id=bugs open title="We Lint all your code using PyLama"> <summary> <b>&hercon; Bugs</b> </summary>' }}
    if data.get('lines_per_bug'):
        {{ '<h4> &star; You wrote 1 Bug every {0} Lines of Code!.</h4> <ol> '.format(data['lines_per_bug']) }}
    for _ in data['pylama']:
        {{ '<li><b><a  title="{3}" alt="{3}" target=_blank href="javascript:void(0)" onclick="overly()">Line {0}</a> Column {1} found by {2}</b> &raquo; <i> {3} </i> <a title="Search info about this Bug" alt="Search info about this Bug" target=_blank href="javascript:void(0)" onclick=searchy("{4}") ><i class="material-icons">search</i></a>'.format(_['lnum'], _['col'], _['linter'].upper(), _['text'], parse.quote_plus(_['text'], encoding='utf-8')) }}
    {{ '<br><br><i><a title="We recommend using PyLama" alt="We recommend using PyLama" target=_blank href="https://github.com/klen/pylama#-pylama">We recommend PyLama</a></i><br></details><hr>' }}


###############################################################################
# TO-DO List


if data.get('todo'):
    {{ '<details id=todo open title="We parse and collect all code comments matching TODO, FIXME, OPTIMIZE or BUG"><summary><b>&check; Things To Do</b></summary> <h4> &star; You have {0} Things to do!.</h4><ol>'.format(len(data['todo'])) }}
    for _ in data['todo']:
        {{ ' <li> <b>{0} on <a title="{2}" alt="{0}" target=_blank href="javascript:void(0)" onclick="overly()">Line {1}</a></b> &raquo; <i> {2} </i> '.format(_['type'].upper(), _['lnum'], _['text'][:99]) }}
    {{ '</ol><br><br><i>We parse and collect all code comments matching the Regular Expression: r"(# TODO|# FIXME|# OPTIMIZE|# BUG)"</i></details><hr>' }}


%}


        <details id=statistics open title="We generate Statistics from code, ideal to show up the work of developers">
            <summary>
                <b>&ccupssm; Statistics</b>
            </summary>
            <center>
                <table class="mdl-data-table mdl-data-table--selectable">
                    <th>Lines Total<th>Lines of Code<th>Size (KiloBytes)<th>Characters</th><tr><td>
                        {%{{'{}<td>{}<td>{}<td>{}<tr>'.format(data['lines_total'], data['lines_code'], data['kilobytes'], data['characters'])}}%}

                    <th>Words<th>Punctuations<th>Permissions<th>Bugs ?</th><tr><td>
                        {%{{'{}<td>{}<td>{}<td>{}<tr>'.format(data['words'], data['punctuations'], data['permissions'], bool(len(data['pylama'])))}}%}

                    <th>SymLink ?<th>Writable ?<th>Executable ?<th>Readable ?</th><tr><td>
                        {%{{'{}<td>{}<td>{}<td>{}<tr>'.format(data['symlink'],data['writable'], data['executable'],data['readable']) }}%}

                    <th>Has Print()?<th>Has __import__()?<th>Has BreakPoints?<th>SheBang ?</th><tr><td>
                        {%{{'{}<td>{}<td>{}<td>{}<tr>'.format(data['has_print'], data['import_procedural'], data['has_set_trace'], data['has_shebang']) }}%}
                </table>
            </center>
            <p> <b>SHA-1 CheckSum Hash of the file (UTF-8): </b> {%{{ data['sha1']     }}%}
            <p> <b>Date of last Modifications (ISO Format): </b> {%{{ data['modified'] }}%}
            <p> <b>Date of last Accessed (ISO Format):      </b> {%{{ data['accessed'] }}%}
        </details>
        <hr>
    </section>
    <br>


    <footer id=footer class="mdl-mini-footer">
        <button id=btfscreen onclick="window.open(window.location.href, 'Dookumentation' , 'type=fullWindow, fullscreen, scrollbars=auto')" class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">FullScreen</button>
        &nbsp;
        <a href="javascript:window.print()">
            <button id=btprint class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">Print</button>
        </a>
        &nbsp;
        <a href="javascript:window.history.back()">
            <button id=btgoback class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">Back</button>
        </a>
        &nbsp;
        <a href="javascript:window.location.reload()">
            <button id=btreload class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">Reload</button>
        </a>
        &nbsp;
        <a href="javascript:window.history.forward()">
            <button id=btforward class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">Forward</button>
        </a>
        &nbsp;
        <a href="javascript:window.open('view-source:' + window.location.href, '_blank')">
            <button id=btsource class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-button mdl-js-ripple-effect">Source</button>
        </a>
        &nbsp;
        <br>
        &nbsp;
        <br>
        <div class="mdl-mini-footer__left-section">
            <b class="mdl-logo" title="Created using Dookumentation">Dookumentation</b>
            <ul class="mdl-mini-footer__link-list">
                <li>Made with <big style="color:red">&hearts;</big> and
                    <a href="https://www.python.org" title=Python>Python</a> by
                    <a href="{%{{__url__}}%}" title=JuanCarlos>Juan</a>!.

                <li><center>
                        <div class=expandicon0 > Tested on
                            <a href="https://www.chromium.org/Home" title=Chromium >Chromium</a>,
                            <a href="https://www.google.com/chrome" title=Chrome >Chrome</a>,
                            <a href="https://www.google.com/chrome/browser/mobile" title=Android >Android</a>,
                            <a href="https://www.mozilla.org/en-US/firefox" title=Firefox >Firefox</a> &
                            <a href="http://www.qupzilla.com/download" title=Qupzilla >Qupzilla</a>.<br>
                            <a href="{%{{__url__}}%}/issues" title=Bugs >Send errors, ideas, bugs, features, fixes, beer, pizza, etc.</a>
                        </div>
                    </center>

                <li><center>
                        <div class=expandicon1 >
                            {%{{" <a href='https://twitter.com/home?status=I%20Like%20{n}!:%20{u}' title='Share on Twitter' target=_blank alt='Share on Twitter'>Twitter</a> <a href='https://plus.google.com/share?url={u}' title='Share on GooglePlus' target=_blank alt='Share on Google Plus'>GooglePlus</a> <br> <a href='http://www.facebook.com/share.php?u={u}&t=I%20Like%20{n}' title='Share on Facebook' target=_blank alt='Share on Facebook'>Facebook</a> <a href='mailto:?body=I%20Like%20{n}!:%20{u}' title='Share via Mail' target=_blank alt='Share on email'>Mail</a> ".format(u=__url__, n="Dookumentation") }}%}
                        </div>
                    </center>

                <li><center>
                        <div class=expandicon2 >
                            <input type=color id=c1 title="Colors Adjust" onchange="colorize(this.value)" >
                            <label for=o1>&nbsp;Links to&nbsp;</label>
                            <select id=o1 title="Linked Reference Documentation (where to search)">
                                <option value="https://docs.python.org/3/search.html?q=" selected > Official
                                <option value="https://stackoverflow.com/search?q=">                StackOverflow
                                <option value="https://devdocs.io/python/library/">                 DevDocs
                                <option value="https://www.google.com/?q=">                         Google
                                <option value="https://github.com/search?&q=">                      GitHub
                                <option value="https://pypi.python.org/pypi?%3Aaction=search&term=">PyPI
                                <option value="https://searx.me/search?q=">                         SearX
                                <option value="https://duckduckgo.com/?q=">                         DuckDuckGo
                            </select>
                        </div>
                    </center>

                <li><center>
                        <div class=expandicon3 >
                            <a title="Export to JSON (Pretty-Printed)" target=_blank alt='Export to JSON' download='{%{{data["basename"]}}%}.json' href="data:application/json;charset=utf-8,{%{{parse.quote(str(data), encoding='utf-8')}}%}">JSON</a>
                            <br>
                            <a title="Export to MarkDown MD (GitHub compatible)" target=_blank alt='Export to MarkDown MD GitHub Compatible' download='{%{{data["basename"]}}%}.md' href="data:text/plain;charset=utf-8,{%{{parse.quote(str(json_meta_to_templar(data, MD, False)), encoding='utf-8')}}%}">MarkDown</a>
                    </center>
        </div>
    </footer>


<script>
    function colorize(color) {

        // Update current Color of element.
        document.querySelector("body").style.background = color;

    };

    function searchy(thingy) {

        // Update current Color of element.
        var selection = document.querySelector("#o1");
        window.open(selection.options[selection.options.selectedIndex].value + thingy, '_blank');

    };

</script>


<!-- Dookumentation


    Templates can execute unrestricted Python 3,
    it should Render something cute from a simple plain text JSON 'data' object,
    the plain text JSON 'data' is simply the *.json file from /doc/json/ folder,
    this Template-Plugin Renders JSON data to MD (MarkDown, GitHub Compatible).

    I/O, Reading and Writing, Folders, SubFolders is handled by Dookumentation.

    The Encoding is UTF-8 and Unicode ready.

    The Programming Code is normal Python 3.

    The Template Mini-Markup code is Templar (Django / Jinja alike):
    https://gist.github.com/juancarlospaco/97a6a09d64b190a630ad#gistcomment-1576482

    For more info about Dookumentation:
    https://github.com/juancarlospaco/dookumentation#dookumentation


-->
