{%
{{ data['basename'] }}


###############################################################################
# Imports


if data.get('imports'):
    {{ 'Imports: {0} Imports!.'.format(len(data['imports']['imports']) + len(data['imports']['from_imports'])) }}
    for _ in data['imports']['imports'].items() :
        {{ 'import {0} {1} Line {2}'.format(_[0], "as {}".format(_[1]['asname']) if _[1]['asname'] else "", _[1]['lineno']) }}
    for _ in data['imports']['from_imports'].items():
        {{ 'from {0} import {1} {2} Line {3}'.format(_[1]['module'], _[0], "as {}".format(_[1]['asname']) if _[1]['asname'] else "", _[1]['lineno'] ) }}
    {{ 'We recommend using iSort: https://github.com/timothycrosley/isort' }}


###############################################################################
# Functions


if data.get('functions'):
    {{ 'Functions {0} Functions!.'.format(len(data.get('functions'))) }}
    for _ in data['functions'].items():
        decoradore = ', '.join(_[1]['decorators']) + ' ' if _[1]['decorators'] != [] else ''
        attrivutes = ''
        if len(_[1]['attrs']):
            for atri in _[1]['attrs'].items():
                attrivutes += '    {0} Line {1}'.format(atri[0], atri[1])
        else:
            attrivutes = '    . . .'
        {{ '{deco} def {name}: Line {lin}'.format(name=_[0], deco=decoradore, lin=_[1]['lineno']) }}
        {{ '    DocString: {docz}'.format(docz=_[1]['docstring']) }}
        {{ '    {atri}'.format(atri=attrivutes) }}


###############################################################################
# Classes


if data.get('classes'):
    {{ 'Classes: {0} Classes!.'.format(len(data.get('classes'))) }}
    for _ in data['classes'].items():
        decoradore = ', '.join(_[1]['decorators']) + ' ' if _[1]['decorators'] != [] else ''
        attrivutes = ''
        if len(_[1]['attributes']):
            for atri in _[1]['attributes'].items():
                attrivutes += '    {0} Line {1}'.format(atri[0], atri[1])
        else:
            attrivutes = '    . . .'
        {{ '{deco} class {name}: Line {lin}'.format(name=_[0], deco=decoradore, lin=_[1]['lineno']) }}
        {{ '    DocString:{docz}'.format(docz=_[1]['docstring']) }}
        {{ '    {atri}'.format(atri=attrivutes) }}
        if len(_[1]['functions']):
            for _ in _[1]['functions'].items():
                decoradore = ', '.join(['    ' + d for d in _[1]['decorators']]) + ' ' if _[1]['decorators'] != [] else ''
                attrivutes = ''
                if len(_[1]['attrs']):
                    for atri in _[1]['attrs'].items():
                        attrivutes += '    {0} Line {1}'.format(atri[0], atri[1])
                else:
                    attrivutes = '    . . .'
                {{ '{deco} def {name}: Line {lin} '.format(name=_[0], deco=decoradore, lin=_[1]['lineno']) }}
                {{ '    DocString: {docz} '.format(docz=_[1]['docstring']) }}
                {{ '    {atri}'.format(atri=attrivutes) }}


###############################################################################
# Attributes


if data.get('attributes'):
    {{ 'Attributes: {0} Attributes!.'.format(len(data.get('attributes'))) }}
    for _ in sorted(data['attributes'].items()):
        {{ '{1} Line {0}'.format(_[1], _[0]) }}


###############################################################################
# Bugs


if data.get('pylama'):
    if data.get('lines_per_bug'):
        {{ 'Bugs: You wrote 1 Bug every {0} Lines of Code!.'.format(data['lines_per_bug']) }}
    for _ in data['pylama']:
        {{ 'Line {0} Column {1} found by {2}: {3} '.format(_['lnum'], _['col'], _['linter'].upper(), _['text']) }}
    {{ 'We recommend using PyLama: https://github.com/klen/pylama#-pylama' }}


###############################################################################
# TO-DO List


if data.get('todo'):
    {{ 'Things To Do: You have {0} Things to do!.'.format(len(data['todo'])) }}
    for _ in data['todo']:
        {{ '{0} Line {1}: {2}.'.format(_['type'].upper(), _['lnum'], _['text']) }}


%}


Statistics:

Lines Total...................{% {{ data['lines_total']       }} %}
Lines of Code.................{% {{ data['lines_code']        }} %}
Size (KiloBytes)..............{% {{ data['kilobytes']         }} %}
Characters....................{% {{ data['characters']        }} %}
Words.........................{% {{ data['words']             }} %}
Punctuations..................{% {{ data['punctuations']      }} %}
Permissions...................{% {{ data['permissions']       }} %}
Bugs ?........................{% {{ bool(len(data['pylama'])) }} %}
SymLink ?.....................{% {{ data['symlink']           }} %}
Writable ?....................{% {{ data['writable']          }} %}
Executable ?..................{% {{ data['executable']        }} %}
Readable ?....................{% {{ data['readable']          }} %}
Has Print() ?.................{% {{ data['has_print']         }} %}
Has __import__() ?............{% {{ data['import_procedural'] }} %}
Has BreakPoints ?.............{% {{ data['has_set_trace']     }} %}
SheBang ?.....................{% {{ data['has_shebang']       }} %}
SHA-1 CheckSum Hash (UTF-8)...{% {{ data['sha1']              }} %}
Date of last Modifications....{% {{ data['modified']          }} %}
Date of last Accessed.........{% {{ data['accessed']          }} %}
